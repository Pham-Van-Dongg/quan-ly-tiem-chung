import { Component } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { FormsModule } from '@angular/forms';
import { HttpClientModule } from '@angular/common/http';
import { CommonModule } from '@angular/common';

@Component({
  selector: 'app-gpt-chat',
  standalone: true,
  imports: [FormsModule, HttpClientModule, CommonModule],
  templateUrl: './gpt-chat.component.html',
  styleUrls: ['./gpt-chat.component.css'],
})
export class GptChatComponent {
  userInput: string = '';
  messages: { role: 'user' | 'assistant'; content: string }[] = [];
  isLoading = false;

  constructor(private http: HttpClient) {}
  sendQuickAdvice() {
    this.userInput = 'T√¥i ch∆∞a ti√™m, n√™n ti√™m v·∫Øc xin n√†o?';
    this.sendMessage();
  }

  sendMessage() {
    const msg = this.userInput.trim();
    if (!msg || this.isLoading) return;

    this.messages.push({ role: 'user', content: msg });
    this.userInput = '';
    this.isLoading = true;

    this.http.get<any>('https://localhost:7025/api/Vaccines').subscribe({
      next: (vaccineData) => {
        const vaccineListText = this.convertVaccineListToText(vaccineData);

        console.log('üì¶ Danh s√°ch v·∫Øc xin d·∫°ng vƒÉn b·∫£n:\n', vaccineListText);

        const systemPrompt = this.buildPromptFromVaccines(vaccineListText);

        const messages = [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: msg },
        ];

        console.log('üß† Prompt system g·ª≠i GPT:\n', systemPrompt);

        const headers = new HttpHeaders({
          'Content-Type': 'application/json',
          Authorization:
            'Bearer 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',
          'HTTP-Referer': 'http://localhost:4200',
        });

        const body = {
          model: 'deepseek/deepseek-r1-0528-qwen3-8b:free',
          messages,
        };

        this.http
          .post<any>('https://openrouter.ai/api/v1/chat/completions', body, {
            headers,
          })
          .subscribe({
            next: (res) => {
              const reply = res.choices[0].message.content.trim();
              this.messages.push({ role: 'assistant', content: reply });
              this.isLoading = false;
            },
            error: (err) => {
              console.error('GPT l·ªói:', err);
              this.messages.push({
                role: 'assistant',
                content: '‚ö†Ô∏è C√≥ l·ªói x·∫£y ra khi g·ªçi GPT. Vui l√≤ng th·ª≠ l·∫°i.',
              });
              this.isLoading = false;
            },
          });
      },
      error: (err) => {
        console.error('L·ªói l·∫•y danh s√°ch v·∫Øc xin:', err);
        this.messages.push({
          role: 'assistant',
          content: '‚ö†Ô∏è Kh√¥ng th·ªÉ l·∫•y danh s√°ch v·∫Øc xin t·ª´ h·ªá th·ªëng.',
        });
        this.isLoading = false;
      },
    });
  }

  convertVaccineListToText(json: any): string {
    if (!json || !json.$values) return 'Kh√¥ng c√≥ d·ªØ li·ªáu v·∫Øc xin.';
    return json.$values
      .map((vac: any) => {
        const ten = vac.tenVac;
        const mui = vac.soMui;
        const cach =
          mui > 1 ? `, ti√™m c√°ch nhau ${vac.thoiGianGiuaMui} ng√†y` : '';
        const hang = vac.hangSanXuat;
        return `- ${ten}: ${mui} m≈©i${cach}, s·∫£n xu·∫•t b·ªüi ${hang}`;
      })
      .join('\n');
  }

  buildPromptFromVaccines(vaccineListText: string): string {
    return `
B·∫°n l√† m·ªôt tr·ª£ l√Ω t∆∞ v·∫•n v·∫Øc xin cho ph√≤ng kh√°m.

D∆∞·ªõi ƒë√¢y l√† danh s√°ch c√°c lo·∫°i v·∫Øc xin hi·ªán t·∫°i ƒëang c√≥ trong h·ªá th·ªëng:

${vaccineListText}

H√£y t∆∞ v·∫•n ng∆∞·ªùi d√πng d·ª±a ƒë√∫ng theo danh s√°ch tr√™n. 
Kh√¥ng li·ªát k√™ v·∫Øc xin n√†o kh√°c kh√¥ng c√≥ trong danh s√°ch.
H√£y tr·∫£ l·ªùi ng·∫Øn g·ªçn, d·ªÖ hi·ªÉu v√† ∆∞u ti√™n t√≠nh ch√≠nh x√°c.
`;
  }
}
